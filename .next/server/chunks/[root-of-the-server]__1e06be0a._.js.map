{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///home/tdev/Personal/lib/mailer.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\n\n// Pour Gmail avec mot de passe d'application\nexport const transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS,\n  },\n});\n\n// Pour Gmail avec OAuth2, décommente et configure si besoin :\n/*\nexport const transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    type: 'OAuth2',\n    user: process.env.EMAIL_USER,\n    clientId: process.env.CLIENT_ID,\n    clientSecret: process.env.CLIENT_SECRET,\n    refreshToken: process.env.REFRESH_TOKEN,\n  },\n});\n*/\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IACpD,SAAS;IACT,MAAM;QACJ,IAAI;QACJ,IAAI;IACN;AACF,IAEA,8DAA8D;CAC9D;;;;;;;;;;;AAWA","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///home/tdev/Personal/app/api/contact/route.ts"],"sourcesContent":["// app/api/send-email/route.ts (ou pages/api/send-email.ts selon votre structure)\n\nexport const runtime = 'nodejs';\nimport { NextResponse } from 'next/server';\nimport { transporter } from '@/lib/mailer';\n\nexport async function POST(req: Request) {\n  try {\n    const { name, email, subject, message } = await req.json();\n\n    // Validation des champs\n    if (!name || !email || !subject || !message) {\n      return NextResponse.json(\n        { error: 'Tous les champs sont requis.' },\n        { status: 400 }\n      );\n    }\n\n    // Validation de l'email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { error: 'Adresse email invalide.' },\n        { status: 400 }\n      );\n    }\n\n    console.log(\"Tentative d'envoi d'email...\");\n\n    // Configuration de l'email\n    const mailOptions = {\n      from: process.env.EMAIL_USER, // Utilisez votre email configuré\n      replyTo: email, // L'email de la personne qui envoie\n      to: 'bernardalade92@gmail.com',\n      subject: `Nouveau message de ${name} - ${subject}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;\">\n            Nouveau message de contact\n          </h2>\n          <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;\">\n            <p><strong>Nom :</strong> ${name}</p>\n            <p><strong>Email :</strong> ${email}</p>\n            <p><strong>Sujet :</strong> ${subject}</p>\n          </div>\n          <div style=\"margin: 20px 0;\">\n            <h3 style=\"color: #333;\">Message :</h3>\n            <div style=\"background-color: #fff; padding: 15px; border-left: 4px solid #007bff; border-radius: 3px;\">\n              ${message.replace(/\\n/g, '<br>')}\n            </div>\n          </div>\n          <hr style=\"margin: 30px 0; border: 0; height: 1px; background: #ddd;\">\n          <p style=\"color: #666; font-size: 12px; text-align: center;\">\n            Ce message a été envoyé depuis votre portfolio le ${new Date().toLocaleString('fr-FR')}\n          </p>\n        </div>\n      `,\n      text: `\n        Nouveau message de contact\n        \n        Nom : ${name}\n        Email : ${email}\n        Sujet : ${subject}\n        \n        Message :\n        ${message}\n        \n        Envoyé le ${new Date().toLocaleString('fr-FR')}\n      `\n    };\n\n    // Envoi de l'email\n    const info = await transporter.sendMail(mailOptions);\n    console.log('Email envoyé avec succès ! ID :', info.messageId);\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Email envoyé avec succès',\n      messageId: info.messageId \n    });\n\n  } catch (error) {\n    console.error(\"Erreur détaillée lors de l'envoi d'email :\", error);\n    \n    // Log plus détaillé pour le debugging\n    if (error instanceof Error) {\n      console.error(\"Message d'erreur :\", error.message);\n      console.error(\"Stack trace :\", error.stack);\n    }\n\n    return NextResponse.json(\n    { \n      success: false,\n      error: \"Erreur lors de l'envoi de l'email. Veuillez réessayer.\",\n      details: process.env.NODE_ENV === 'development' ? error.message : undefined\n    },\n      { status: 500 }\n    );\n  }\n}\n\n// lib/mailer.ts - Votre configuration du transporter\n/*\nimport nodemailer from 'nodemailer';\n\nexport const transporter = nodemailer.createTransporter({\n  host: 'smtp.gmail.com',\n  port: 587,\n  secure: false, // true pour le port 465, false pour les autres ports\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS, // Mot de passe d'application Gmail\n  },\n  tls: {\n    rejectUnauthorized: false\n  }\n});\n\n// Vérifier la configuration au démarrage\ntransporter.verify(function (error, success) {\n  if (error) {\n    console.log('Erreur de configuration email:', error);\n  } else {\n    console.log('Serveur email prêt à envoyer des messages');\n  }\n});\n*/\n\n// .env.local - Variables d'environnement requises\n/*\nEMAIL_USER=votre-email@gmail.com\nEMAIL_PASS=votre-mot-de-passe-application-gmail\n*/"],"names":[],"mappings":"AAAA,iFAAiF;;;;;AAGjF;AACA;AAFO,MAAM,UAAU;;;AAIhB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAExD,wBAAwB;QACxB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wBAAwB;QACxB,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,MAAM,cAAc;YAClB,IAAI;YACJ,SAAS;YACT,IAAI;YACJ,SAAS,CAAC,mBAAmB,EAAE,KAAK,GAAG,EAAE,SAAS;YAClD,MAAM,CAAC;;;;;;sCAMyB,EAAE,KAAK;wCACL,EAAE,MAAM;wCACR,EAAE,QAAQ;;;;;cAKpC,EAAE,QAAQ,OAAO,CAAC,OAAO,QAAQ;;;;;8DAKe,EAAE,IAAI,OAAO,cAAc,CAAC,SAAS;;;MAG7F,CAAC;YACD,MAAM,CAAC;;;cAGC,EAAE,KAAK;gBACL,EAAE,MAAM;gBACR,EAAE,QAAQ;;;QAGlB,EAAE,QAAQ;;kBAEA,EAAE,IAAI,OAAO,cAAc,CAAC,SAAS;MACjD,CAAC;QACH;QAEA,mBAAmB;QACnB,MAAM,OAAO,MAAM,+GAAA,CAAA,cAAW,CAAC,QAAQ,CAAC;QACxC,QAAQ,GAAG,CAAC,mCAAmC,KAAK,SAAS;QAE7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,WAAW,KAAK,SAAS;QAC3B;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAE5D,sCAAsC;QACtC,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,KAAK,CAAC,sBAAsB,MAAM,OAAO;YACjD,QAAQ,KAAK,CAAC,iBAAiB,MAAM,KAAK;QAC5C;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACxB;YACE,SAAS;YACT,OAAO;YACP,SAAS,uCAAyC,MAAM,OAAO,GAAG;QACpE,GACE;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,qDAAqD;CACrD;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAEA,kDAAkD;CAClD;;;AAGA","debugId":null}}]
}
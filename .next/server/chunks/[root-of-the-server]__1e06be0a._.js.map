{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///home/tdev/Documents/portfolio/lib/mailer.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\n\n// Pour Gmail avec mot de passe d'application\nexport const transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS,\n  },\n});\n\n// Pour Gmail avec OAuth2, décommente et configure si besoin :\n/*\nexport const transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    type: 'OAuth2',\n    user: process.env.EMAIL_USER,\n    clientId: process.env.CLIENT_ID,\n    clientSecret: process.env.CLIENT_SECRET,\n    refreshToken: process.env.REFRESH_TOKEN,\n  },\n});\n*/\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IACpD,SAAS;IACT,MAAM;QACJ,IAAI;QACJ,IAAI;IACN;AACF,IAEA,8DAA8D;CAC9D;;;;;;;;;;;AAWA","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///home/tdev/Documents/portfolio/app/api/contact/route.ts"],"sourcesContent":["export const runtime = 'nodejs';\n\nimport { NextResponse } from 'next/server';\n\nimport { transporter } from '@/lib/mailer';\n\nexport async function POST(req: Request) {\n  try {\n    const { name, email, subject, message } = await req.json();\n\n    if (!name || !email || !subject || !message) {\n      return NextResponse.json(\n        { error: 'Tous les champs sont requis.' },\n        { status: 400 }\n      );\n    }\n\n\n\n    return NextResponse.json({ message: 'Email envoyé avec succès' });\n    const mailOptions = {\n      from: `\"${name}\" <${process.env.EMAIL_USER}>`,\n      to: 'bernardalade92@gmail.com',\n      subject: `Nouveau message de ${name} - ${subject}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif;\">\n          <h2>Nouveau message de contact</h2>\n          <p><strong>Nom :</strong> ${name}</p>\n          <p><strong>Email :</strong> ${email}</p>\n          <p><strong>Sujet :</strong> ${subject}</p>\n          <p><strong>Message :</strong></p>\n          <p>${message.replace(/\\n/g, '<br>')}</p>\n        </div>\n      `,\n    };\n\n    await transporter.sendMail(mailOptions);\n\n    return NextResponse.json({ message: 'Email envoyé avec succès' });\n  } catch (error) {\n    console.error(\"Erreur d'envoi d'email :\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de l'envoi de l'email. Veuillez réessayer.\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AAJO,MAAM,UAAU;;;AAMhB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QAExD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAIA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA2B;;;QAC/D,MAAM;IAmBR,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyD,GAClE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}